@inject ZDY.DMS.Services.AdminService.ServiceContracts.IPageService PageService
@inject AutoMapper.IMapper Mapper
@using ZDY.DMS.DataTransferObjects
@using ZDY.DMS.AspNetCore.Auth

@{
    var userIdentity = this.Context.GetUserIdentity();

    var pages = userIdentity.IsAdministrator ? await PageService.GetMultiLevelPagesAsync() : await PageService.GetMultiLevelPagesAsync(userIdentity.Id, userIdentity.CompanyId);

    Func<IEnumerable<MultiLevelPageDTO>, TagBuilder> RenderMenu = null;

    bool isSubMenu = false;

    RenderMenu = (items) =>
    {
        if (items.Count() > 0)
        {
            TagBuilder sidebarMenu = new TagBuilder("ul");

            if (isSubMenu)
            {
                sidebarMenu.AddCssClass("sub-menu");
            }
            else
            {
                sidebarMenu.AddCssClass("page-sidebar-menu page-header-fixed full-height full-height page-sidebar-menu-compact");
                sidebarMenu.Attributes.Add("data-keep-expanded", "false");
                sidebarMenu.Attributes.Add("data-auto-scroll", "true");
                sidebarMenu.Attributes.Add("data-slide-speed", "200");
                isSubMenu = true;
            }

            foreach (var item in items)
            {

                TagBuilder navItem = new TagBuilder("li");
                navItem.AddCssClass("nav-item");

                if (!item.IsInMenu)
                {
                    navItem.AddCssClass("hide");
                }

                TagBuilder navLink = new TagBuilder("a");

                navLink.AddCssClass("nav-link");

                if (item.ChildLevelPages.Count() > 0)
                {
                    navLink.AddCssClass("nav-toggle");
                }

                if (item.Type == "P")
                {
                    var data = new
                    {
                        PageId = item.Id,
                        PageSrc = $"/{item.Src}",
                        item.ParentId,
                        item.PageCode,
                        item.MenuName,
                        item.PageName
                    };

                    navLink.Attributes.Add("href", data.PageSrc);
                    navLink.Attributes.Add("data-json", JsonConvert.SerializeObject(data));
                    navLink.Attributes.Add("data-bind", "{click: $root.openPage}");
                }
                else
                {
                    navLink.Attributes.Add("href", $"javascript:;");
                }

                if (!String.IsNullOrEmpty(item.Icon))
                {
                    TagBuilder icon = new TagBuilder("i");
                    icon.AddCssClass(item.Icon);
                    navLink.InnerHtml.AppendHtml(icon);
                    navLink.InnerHtml.AppendHtml(" ");
                }
                navLink.InnerHtml.AppendHtml($"<span class='title'>{item.MenuName}</span>");
                if (item.ChildLevelPages.Count() > 0)
                {
                    navLink.InnerHtml.AppendHtml("<span class='arrow'></span>");
                }

                navItem.InnerHtml.AppendHtml(navLink);

                if (item.ChildLevelPages.Count() > 0)
                {
                    var nextLevelMenu = RenderMenu.Invoke(item.ChildLevelPages);
                    navItem.InnerHtml.AppendHtml(nextLevelMenu);
                }

                sidebarMenu.InnerHtml.AppendHtml(navItem);

            }

            return sidebarMenu;
        }

        return null;
    };

    var menu = RenderMenu(pages);
}

@menu

